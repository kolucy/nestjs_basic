[package.json]
  "dependencies": {
    "@nestjs/common": "^9.0.0",
    "@nestjs/core": "^9.0.0",
    "@nestjs/platform-express": "^9.0.0",
    // nestjs 안에서 자체적으로 동작하는 라이브러리
    "reflect-metadata": "^0.1.13",
    // decorator(@) 문법을 쓸 때 사용되는 패키지
    "rimraf": "^3.0.2",
    // linux나 mac에 rm-rf(특정 파일/폴더 제거 명령어)를 windows에서도 사용할 수 있게 해주는 패키지
    "rxjs": "^7.2.0"
    // 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리
    // RxJS는 NestJS 안에서 쓰이게 됨
  }

[NestJS]
https://docs.nestjs.com/
- 컨트롤러는 들어오는 요청을 처리하고 클라이언트에 응답을 반환한다
- 컨트롤러의 목적은 애플리케이션에 대한 특정 요청을 수신하는 것
- 데코레이터는 기능을 첨가
- app.service를 사용하기 위해 AppController(app.controller) 안에서 의존성 주입을 한다
- 의존성 주입: class 안에서 service를 사용할 수 있도록 하는 방법
- nestjs는 module 단위로 이동
- service, repository, factory 등 기본 Nest classd의 대부분은 provider로 취급될 수 있다
- provider는 종속성(dependency)으로 주입(inject)될 수 있다
- provider로 취급되는 것들은 @Injectable() 데코레이터로 표현
- AppController는 공급된 appServie를 인스턴스로 의존성 주입을 받아서 사용할 수 있다
- 객체지향 프로그래밍의 핵심 목표: 실생활과 유사하게 코드를 짠다
  -> 공급자(provider: AppService)/소비자(controller: AppController) 관계, 제품(service: appService), 등록(Module)
  -> 유지보수를 쉽게, 확장성 있고 탄탄하게 백엔드 설계
  -> nestjs는 코드에 의존성을 명시함으로써 의존성 관리를 확실하게 한다
- module 생성 (controller: co, service: service)
  -> nest g mo <name>
- spec은 테스트용
- Module은 기본적으로 provider를 캡슐화한다 (은닉화되어 다른 모듈에서 접근 못함)
  - 방법1. 외부 모듈에서 서비스를 사용할 수 있도록 해당 Module(cats.module)에서 export한다
    -> 은닉화 해제 => public
  - 방법2. app.module에서 provider에 CatsService 등록
    -> 분리된 모듈들을 다시 합치는 것은 단일 체계 원칙이 깨지므로 좋은 방법이 아님
    -> app.module이 자체적으로 만든 서비스만 provider에 넣어주는 것이 좋다
- middleware는 route handler 이전에 호출되는 함수
- Nest middleware는 기본적으로 express middleware와 동일
- logger middleware: 요청하는 대상에 대해 어떤 대상이 어떤 것을 요청했는지 찍어주는(logging) 미들웨어
- @Module() 데코레이터에는 미들웨어를 위한 장소가 없기 때문에 module class의 configure() 메소드를 사용하여 설정한다
- nestjs는 logging을 할 때 logger라는 class를 사용
- Exception
  Middleware -> Controller -> Service -> Exception
- Pipes
  - https://docs.microsoft.com/en-us/azure/architecture/patterns/pipes-and-filters
  - 클라이언트 요청에서 들어오는 데이터를 '유효성 검사' 및 '변환'을 수행하여 서버가 원하는 데이터를 얻을 수 있도록 도와주는 클래스
  - 파이프는 단방향 통신을 위한 용도로 사용된다
  - 하나의 파이프는 이전 파이프에서 전달된 결과를 입력 값으로 받아 또 다른 결과 값을 내놓는다
- *Request Lifecycle
  request -> middleware -> guards -> interceptors(pre-controller) -> pipes -> controller(method handler) -> service -> interceptor(post-request) -> exception filters -> response
- interceptor
  - @Injectable() 데코레이터로 annotate되는 클래스
  - NestInterceptor 인터페이스를 구현
  - AOP(Aspect Oriented Programming, 관점 지향 프로그래밍) 기술에서 영감을 받은 여러 기능 존재
  - AOP: cross-cutting concern의 분리를 허용함으로써 모듈성을 증가시키는 것이 목적인 프로그래밍 패러다임
  - controller가 시작하기 전과 끝났을 때를 나눠서 코딩 가능
- middleware와 interceptor의 차이점: 실행 순서가 다르다
- interceptor로 logging을 만들 수 있다
- mongoose에서는 virtual field를 제공해준다
  - 실제로 db에 저장되는 필드는 아니지만 비즈니스 로직에서 사용할 수 있도록 제공해주는 필드
- CORS
  - Cross-origin resource sharing
  - 내가 서비스하고있지 않는 서비스에서 의도치 않는 접근을 막아주는 것
  - CORS에서 허용한 사이트만 접근할 수 있도록 하는 것
  - 어떤 프론트엔드 사이트에서 API를 사용할지 설정
- Repository 패턴
  - 모듈간의 책임 분리가 확실해진다
  - Service layer에서 데이터의 출처와 관계없이 동일한 방식으로 데이터를 접근할 수 있도록 하는 것
    => 데이터베이스 캡슐화, 데이터베이스 중앙 통제실
  - repository 패턴도 dependency injection이 가능한 클래스다
    -> Service에서 의존성 주입을 받아서 사용하기 때문
  - 디자인 패턴 중 하나 -> 필수 패턴은 아님, 개인의 선택
- mongoose 버전 문제
  - ERROR [ExceptionsHandler] Schema hasn't been registered for model "comments".
Use mongoose.model(name, schema)
  - mongoose 버전 6으로 올라가면 nest 8과 호환되지 않는 부분이 있다
  - package.json에서 해당 부분 수정 후 npm i
  - "mongoose" : "^5.13.9"
  - "@nestjs/mongoose" : "^8.0.1"
- mongoose - populate() method 활용
  - virtual field를 만들어서 다른 document와 연결
  - https://mongoosejs.com/docs/populate.html
- Multer
  - Issue: Multer file buffer missing(undefined)
  - Storage
    - DiskStorage: 파일을 disk에 저장
    - MemoryStorage: 파일을 memory에 Buffer 객체로 저장
  - buffer is for MemoryStorage only

[AWS 클라우드 VPS 구축 & PM2로 서버 운영]
1. Pm2 설치 https://github.com/Unitech/pm2
- npm i pm2 -g
- pm2 list
- package.json 수정, .env MODE=‘prod’로 수정, PORT=80으로 수정
- npm run start:debug 
  - build 전에 debug를 사용하여 코드에 에러가 있는지 확인
  - prod 모드에서는 쿼리 관련 로그가 없다(mongodb)
- npm run build
  - dist 제거 후 다시 생성
  - dist는 배포용 디렉터리
- npm run start:prod
- pm2 list
- pm2 kill

2. github에 코드 올리기
- https://github.com/amamov/gits
- .env는 .gitignore에 추가해서 올리기
- dist만 따로 빼서
  - 개발용에서는 dist가 필요없기 때문에 .gitignore에 dist를 넣었지만, 배포용에서는 필요

3. VPS : 가상 사설 서버 구축
- AWS Lightsail 사용 
- 인스턴스 생성
- ssh를 사용하여 연결
  - 원격 접속 프로토콜로 ssh를 사용
- sudo apt-get update
  - apt-get(Advanced Packaging Tool): 리눅스 패키지 관리 명령어 도구
- sudo apt-get -y upgrade
- sudo apt-get install build-essential
  - build-essential: 빌드에서 핵심적으로 담당하는 패키지
- sudo apt-get install curl
- curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash --
- sudo apt-get install -y nodejs
- sudo apt-get install git
- sudo apt-get install vim
  - vim: shell에서 코드 editing을 할 수 있는 도구
- touch .gitconfig
  - git에 대한 setting file 생성
  - 안하고 넘어가는 경우도 많지만, git에 확실하게 사용자 등록을 하기 위함
- git config --global user.name kolucy
- git config --global user.email lucychan20d@gmail.com
- git config --global --list
- git clone <프로젝트>
  - git clone https://github.com/kolucy/nestcats-deploy.git
- ll
- cd <프로젝트>
  - cd nestcats-deploy/
- npm i
  - package.json을 기반으로 필요한 node_modules들을 설치
- sudo npm i -g @nestjs/cli
- sudo npm i -g pm2
  - @nestjs/cli와 pm2는 프로젝트를 관리하기 위한 도구이기 때문에 global로 설치하는 것이 좋음
- vi .env (환경변수 붙여 넣기)
  - gitignore에서 .env(환경변수)를 추가했으므로 여기서는 없는 상태
- sudo npm run start:prod

4. 고정 퍼블릭 주소 할당받기
- 15.164.44.210
- 도메인을 붙여주는 작업 필요
  - Route 53에서 도메인 등록
  - 등록 후 DNS 서버에 ip를 붙여주면 접속 가능

5. 배포 성공!!!

6. How to kill a node process
  ps -ef | grep node
  # or
  ps aux | grep node
  # and
  kill -9 PROCESS_ID

7. 도메인 등록
- porkbun.com (유료, 연 $8)
- Route 53 (유료, 연 $12)
- 내도메인.한국 (무료)
  - https://xn--220b31d95hq8o.xn--3e0b707e/
  - IP연결(A): 고정 IP
  - IP연결(AAAA): 퍼블릭 IPv6

[서버 사이드 렌더링(SSR)]
- CSR
  - 클라이언트 사이드 렌더링
  - 클라이언트 사이드(브라우저)에서 HTML을 렌더링한다
  - 사용자 인터랙션이 많고 js code로 작업을 많이 해야하는 경우 CSR이 유리
  - 불안정하다
    - js로 클라이언트에서 직접 렌더링을 하므로 시간이 걸린다
- SSR
  - 서버 사이드에서 HTML을 렌더링해서 브라우저에 직접 전송해준다
  - 검색 엔진 최적화
    - 해당 웹 사이트의 정보를 이미지와 설명으로 표시해주는 OG(Open Graph) Tag를 페이지별로 적용하기 위해서는 서버 사이드 렌더링이 효율적이다
  - 빠른 페이지 렌더링
  - Node.js 환경에서 실행되기 때문에 브라우저 관련 API를 다룰 때 주의해야 한다
  - SSR의 대표적인 예: MDN
- SSR과 CSR을 의도에 맞게 번갈아가며 사용하는 것이 효율적이다

[MVC 패턴]
- 소프트웨어 디자인 패턴
- Model, View, Controller 책임을 분리해서 나눈 패턴
- 하나의 소프트웨어 프로그램을 각각의 영역으로 관심사를 분리
- Model
  - MongoDB, mongoose
  - 앱이 포함해야 할 데이터가 무엇인지를 정의한다
- View
  - HTML 파일(html, css, js)
  - 데이터를 보여주는 방식을 정의
- Controller
  - 사용자 입력에 대한 응답으로 Model 또는 View를 업데이트하는 로직을 포함한다
- NestJS에서 MVC 패턴을 지원
- nest new chattings
- npm install --save hbs
  - HTML을 렌더링할 수 있는 엔진
  - hbs(Handlebars): 템플릿 엔진
  - hbs 파일은 nest에서 처리 후 서버사이드에서 클라이언트사이드로 보낼 때 html로 렌더링되어 보내진다
  - hbs는 html과 달리 변수를 받을 수 있다 - by {{}}
- npm i --save @nestjs/config
  - 환경변수(.env) 설정을 위해 설치
- npm install --save @nestjs/mongoose mongoose

[HTTP vs. Socket]
- HTTP 연결 방식: 단방향
  - 응답을 보내는 순간 연결 종료
  - 단방향: 클라이언트가 반드시 request를 해야 서버에서 response를 보낸다
  - polling 방식: 요청을 계속 보내 단방향 연결을 여러번 수행하여 양방향 연결처럼 보이게 하는 것
    - 단점: 0.01초마다 요청-응답을 반복하므로 서버에 부하가 온다
    - 해결방법: Socket 연결 방식
- Socket 연결 방식: 양방향
  - socket: 입구, 콘센트

[Socket Programming]
- 일반적으로 socket programming은 Gateway를 사용하여 개발
- gateway는 Injectable(dependency injection 가능)한 클래스
- npm i --save @nestjs/websockets @nestjs/platform-socket.io
- socket.io: emit과 on으로 소통
- nest g ga chats -> gateway class 생성
- nest g mo chats -> module 생성
- gateway로 socket programming을 한다
- socket을 사용하기 위해서는 socket.io라는 CDN(Content Delivery Network) 서비스 필요
- 라이브러리는 html 파일에 script로 넣을 수 있다
  - cdn.socket.io: 클라이언트에서 사용할 수 있도록
  - polyfill: Promise.all() 사용할 수 있도록
  - babel: 최신 js 문법을 브라우저에서 사용할 수 있도록
- socket.emit으로 보내고 socket.on으로 받는다
- socket은 각각의 id가 존재, id는 연결이 끊기기 전까지 유지된다
- socket.on은 콜백 함수로 데이터를 받을 수 있다
- socket.io를 지원하지 않는 브라우저가 있으므로 polling으로 먼저 확인 후 websocket 방식으로 통신한다
- 소켓 프로그래밍의 핵심: '이벤트 정의'와 '이벤트 설계'

[Lifecycle hooks]
- 인터페이스: OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect
- OnGatewayInit
  - afterInit() 메소드를 강제로 구현
  - 초기화되고 바로 실행되는 함수
  - constructor가 메모리에 올라온 후 gateway가 작동될 때 init 실행 => init은 constructor 다음으로 실행된다
- OnGatewayConnection
  - handleConnection() 메소드를 강제로 구현
  - socket이 처음 연결될 때 메소드 실행
- OnGatewayDisconnect
  - handleDisconnect() 메소드를 강제로 구현
  - socket이 연결이 끊길 때 실행되는 함수

[Broadcasting]
- 연결된 모든 네트워크에 메세지를 보낸다
- 모든 클라이언트가 서버에서 보낸 broadcasting event를 받는다
- socket.emit은 해당하는 id를 가진 socket에만 데이터를 보내는 반면, socket.broadcast.emit은 연결된 모든 소켓에 데이터를 보낸다

[Event Bubbling]
- 특정 화면 요소에서 이벤트가 발생했을 때 해당 이벤트가 더 상위의 화면 요소들로 전달되어 가는 특성

[PostgreSQL]
- Docker: 컨테이너 격리 기술을 제공하는 소프트웨어
- pgAdmin: DB 관리 툴
- container 생성: docker-compose up -d
  - 옵션 -d: demon에서 연다
  - demon 서버는 백그라운드에서 돌아간다
- SELECT * FROM public."USER";

[Thunder Client]
- VSCode에서 사용할 수 있는 확장 클라이언트
- Ctrl + Shift + P -> Thunder Client: Focus on Thunder Client View -> New Request
- ERROR
  - Login sessions require session support. Did you forget to use `express-session` middleware?

[TDD]
- 테스트 주도 개발(Test-Driven Development)
- test -> app.e2e-spec.ts
- TestingModule: jest를 nestjs framework에서 사용할 수 있도록 도와주는 모듈
- describe 내에서 describe할 수 있다
- beforeEach는 테스트 진행 전에 가장 먼저 실행되는 함수
- axios: node.js와 브라우저를 위한 Promise 기반 HTTP 클라이언트(비동기 통신 라이브러리)
- it == test

[ERD 모델링]
- ERD: Entitiy-Relationship Diagram
- 테이블(physical // logical: domain or entity)
- ERD: 테이블(도메인) 간의 연결 관계를 나타낸 것
- DA 가이드: https://dataonair.or.kr/db-tech-reference/d-guide/da-guide/?pageid=1&mod=list&target=&keyword=%EC%A0%95%EA%B7%9C%ED%99%94
- 정규화: 테이블을 어떻게 잘 쪼갤지
- ERD 표기법
  - 관계선의 종류
    - 실선(Identifying): 식별관계
      - 부모테이블의 PK가 자식테이블의 PK/FK가 되는 경우
      - 부모가 있어야 자식이 생기는 경우
    - 점선(Non-Identifying): 비식별관계
      - 부모테이블의 PK가 자식테이블의 일반속성이 되는 경우
      - 부모가 없어도 자식이 생기는 경우
  - 기호, 도형의 종류
    - | : 1개 / 실선은 '1'을 의미
    - ∈ : 여러개 / 까마귀 발은 '다수' 혹은 '그 이상'을 의미
    - o : 0개 / 고리는 '0'을 의미
  - A  | B : 하나의 A는 하나의 B로 구성되어 있다
  - A  ∈ B : 하나의 A는 하나 이상의 B로 구성되어 있다
  - A  o| B : 하나의 A는 하나 이하의 B로 구성되어 있다
  - A  o∈ B : 하나의 A는 0 또는 하나 이상의 B로 구성되어 있다
- N:M 관계를 물리적으로 표현하기 위해서는 중간에 테이블이 필요(튜플 형식)
- TypeORM 자체에서 N:M 관계를 논리적으로 표현이 가능하도록 제공해준다(N:M 관계 매핑)
- module은 도메인 단위로 끊어주는 것이 좋다

[엔터티간 관계]
- @OneToOne()
  - 단방향 연결, 양방향도 가능
  - User을 통해서만 Profile에 접근할 수 있으므로 단방향으로 연결(users.entity에만 작성)
- @JoinColumn()
  - 양방향 연결의 경우 JoinColumn은 한곳에만 작성하는 것이 좋다
  - @ManyToOne에서 Many에 해당하는 컬럼에 조인하는 것이 좋다
  - 외래키 정보를 적는다
  - name: DB에 저장될 컬럼 이름 설정
  - referencedColumnName: name에 참조할 실제 컬럼명
- @OneToMany()
- @ManyToOne()
- @ManyToMany
- @JoinTable(): 테이블 생성
- cascade
  - CASCADE 는 부모의 영속성 상태를 자식에게 전달할 때 사용
  - 부모를 저장할 때, 추가된 자식을 저장하거나 부모를 삭제할 때 연관된 자식을 삭제하는 것
  => 따라서 확실하게 자식을 관리하는 엔티티가 해당 엔터티 하나일때만 사용해야 하며, 데이터의 라이프 사이클이 같을 때 써야한다.
- nest g res visitors
  - CRUD 관련 resource 생성

[AdminBro]
- 관리자 페이지 개발
- nest new mongoose-admin
- npm install --save @nestjs/mongoose mongoose
- npm i @adminjs/express @adminjs/mongoose @adminjs/nestjs adminjs
- npm i --save @nestjs/config
- nest g mo blog (test용)
- nest g mo admin
- AdminModule.createAdminAsync
  - admin 사이트 생성
- TypeError: Cannot destructure property 'Database' of 'undefined' as it is undefined.
    at Function.registerAdapter (C:\Users\Lucy\gitProjects\nestjs_basic\mongoose-admin\node_modules\adminjs\lib\adminjs.js:158:5)
    at Object.<anonymous> (C:\Users\Lucy\gitProjects\nestjs_basic\mongoose-admin\src\admin\admin.module.ts:10:9)
    - 컴파일 에러
    - import AdminJSMongoose from '@adminjs/mongoose'; -> import * as AdminJSMongoose from '@adminjs/mongoose';
- ERROR [PackageLoader] The "@adminjs/express" package is missing. Please, make sure to install this library ($ npm install @adminjs/express) 
to take advantage of @adminjs/nestjs.
  - npm i express-session express-formidable
  - https://github.com/SoftwareBrothers/adminjs-nestjs/issues/23
- connect ECONNREFUSED 127.0.0.1:27017
  - '서비스' 자동 설정 확인 이후 '시작'하기
  - https://pandam.net/86
- Customize dashboard
  - https://docs.adminjs.co/tutorial-custom-dashboard.html